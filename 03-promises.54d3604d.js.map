{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,cAEa,CACXC,KAAMC,SAASC,cAAc,UAG1BF,KAAKG,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAEC,iBAEF,IAAgCC,EAAAF,EAAEG,OAAOC,SAAjCC,EAAwBH,EAAxBG,MAAOC,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAEfC,EAAWC,EACfC,OAAOL,EAAMM,OACbD,OAAOJ,EAAKK,OACZD,OAAOH,EAAOI,QAGfC,EAAAlB,EAAA,CAAGc,GAAUK,SAAQ,SAACC,EAASC,GAC9BD,EACGE,MAAK,WACJJ,EAAAK,GAASC,OAAOC,QACd,uBAA4CC,OAAnBL,EAAW,EAAE,QAA0BK,OAApBV,OAAOL,EAAMM,OAAO,M,IAGnEU,OAAM,WACLT,EAAAK,GAASC,OAAOI,QACd,sBAAyCF,OAAnBL,EAAW,EAAE,QAA0BK,OAApBV,OAAOL,EAAMM,OAAO,M,UAMvE,IAAMY,EAAgB,SAAAC,G,OACpB,IAAIC,SAAQ,SAACC,EAASC,GACpB,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YACE,W,OACEH,EACIF,EAAQ,CAAErB,MAAOmB,IACjBG,EAAO,CAAEtB,MAAOmB,G,GACtBA,E,KAIAf,EAAmB,SAACJ,EAAOC,EAAMC,GAErC,IADA,IAAMC,EAAW,GACRwB,EAAI,EAAGA,EAAIzB,EAAQyB,GAAK,EAAG,CAClC,IAAMR,EAAenB,EAAQ2B,EAAI1B,EACjCE,EAASyB,KAAKV,EAAcC,G,CAE9B,OAAOhB,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('form'),\n};\n\nrefs.form.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(e) {\n  e.preventDefault();\n\n  const { delay, step, amount } = e.target.elements;\n\n  const promises = generatePromises(\n    Number(delay.value),\n    Number(step.value),\n    Number(amount.value)\n  );\n\n  [...promises].forEach((promise, position) => {\n    promise\n      .then(() => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position + 1} in ${Number(delay.value)}ms`\n        );\n      })\n      .catch(() => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position + 1} in ${Number(delay.value)}ms`\n        );\n      });\n  });\n}\n\nconst createPromise = promiseDelay =>\n  new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(\n      () =>\n        shouldResolve\n          ? resolve({ delay: promiseDelay })\n          : reject({ delay: promiseDelay }),\n      promiseDelay\n    );\n  });\n\nconst generatePromises = (delay, step, amount) => {\n  const promises = [];\n  for (let i = 0; i < amount; i += 1) {\n    const promiseDelay = delay + i * step;\n    promises.push(createPromise(promiseDelay));\n  }\n  return promises;\n};\n"],"names":["$8nrFW","parcelRequire","form","document","querySelector","addEventListener","e","preventDefault","_elements","target","elements","delay","step","amount","promises","$ce04d3a99e08e73b$var$generatePromises","Number","value","$parcel$interopDefault","forEach","promise","position","then","$6JpON","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$createPromise","promiseDelay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","i","push"],"version":3,"file":"03-promises.54d3604d.js.map"}
{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAG/B,IAAIC,EAAW,GAEfJ,EAAKC,KAAKI,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAEC,iBAEF,MAAMC,MAAEA,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAEK,OAAOC,SAEzCR,EAAWS,EACTC,OAAON,EAAMO,OACbD,OAAOL,EAAKM,OACZD,OAAOJ,EAAOK,QAGhBX,EAASY,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAAeL,OAAON,EAAMO,OAASG,EAAWJ,OAAOL,EAAKM,OAClEE,EACGG,MAAK,KACJC,EAAAvB,GAASwB,OAAOC,QACd,uBAAqBL,EAAY,QAASC,MAAiB,IAG9DK,OAAM,KACLH,EAAAvB,GAASwB,OAAOG,QACd,sBAAoBP,EAAU,QAASC,MAAiB,GAE1D,G,IAIR,MAAMO,EAAgBP,GACpB,IAAIQ,SAAQ,CAACC,EAASC,KACpB,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YACE,IACEH,EACIF,EAAQ,CAAEpB,MAAOW,IACjBU,EAAO,CAAErB,MAAOW,KACtBA,EACD,IAGCN,EAAmB,CAACL,EAAOC,EAAMC,KACrC,MAAMwB,EAAW,GACjB,IAAK,IAAIC,EAAI,EAAGA,EAAIzB,EAAQyB,GAAK,EAAG,CAClC,MAAMhB,EAAeX,EAAQ2B,EAAI1B,EACjCyB,EAASE,KAAKV,EAAcP,G,CAE9B,OAAOe,CAAQ","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('form'),\n};\n\nlet promises = [];\n\nrefs.form.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(e) {\n  e.preventDefault();\n\n  const { delay, step, amount } = e.target.elements;\n\n  promises = generatePromises(\n    Number(delay.value),\n    Number(step.value),\n    Number(amount.value)\n  );\n\n  promises.forEach((promise, position) => {\n    const promiseDelay = Number(delay.value) + position * Number(step.value);\n    promise\n      .then(() => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position + 1} in ${promiseDelay}ms`\n        );\n      })\n      .catch(() => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position + 1} in ${promiseDelay}ms`\n        );\n      });\n  });\n}\n\nconst createPromise = promiseDelay =>\n  new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(\n      () =>\n        shouldResolve\n          ? resolve({ delay: promiseDelay })\n          : reject({ delay: promiseDelay }),\n      promiseDelay\n    );\n  });\n\nconst generatePromises = (delay, step, amount) => {\n  const promises = [];\n  for (let i = 0; i < amount; i += 1) {\n    const promiseDelay = delay + i * step;\n    promises.push(createPromise(promiseDelay));\n  }\n  return promises;\n};\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","$47d4ff9957288465$var$promises","addEventListener","e","preventDefault","delay","step","amount","target","elements","$47d4ff9957288465$var$generatePromises","Number","value","forEach","promise","position","promiseDelay","then","$parcel$interopDefault","Notify","success","catch","failure","$47d4ff9957288465$var$createPromise","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","promises1","i","push"],"version":3,"file":"03-promises.cbcacf69.js.map"}
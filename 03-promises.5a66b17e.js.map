{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAK/BH,EAAKC,KAAKG,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAEC,iBAEF,IAAgCC,EAAAF,EAAEG,OAAOC,SAAjCC,EAAwBH,EAAxBG,MAAOC,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAEVC,EACTC,OAAOJ,EAAMK,OACbD,OAAOH,EAAKI,OACZD,OAAOF,EAAOG,QAGPC,SAAQ,SAACC,EAASC,GACzB,IAAMC,EAAeL,OAAOJ,EAAMK,OAASG,EAAWJ,OAAOH,EAAKI,OAClEE,EACGG,MAAK,WACJC,EAAAvB,GAASwB,OAAOC,QACd,uBAA4CC,OAAnBN,EAAW,EAAE,QAAmBM,OAAbL,EAAa,M,IAG5DM,OAAM,WACLJ,EAAAvB,GAASwB,OAAOI,QACd,sBAAyCF,OAAnBN,EAAW,EAAE,QAAmBM,OAAbL,EAAa,M,UAMhE,IAAMQ,EAAgB,SAAAR,G,OACpB,IAAIS,SAAQ,SAACC,EAASC,GACpB,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YACE,W,OACEH,EACIF,EAAQ,CAAEnB,MAAOS,IACjBW,EAAO,CAAEpB,MAAOS,G,GACtBA,E,KAIAN,EAAmB,SAACH,EAAOC,EAAMC,GAErC,IADA,IAAMuB,EAAW,GACRC,EAAI,EAAGA,EAAIxB,EAAQwB,GAAK,EAAG,CAClC,IAAMjB,EAAeT,EAAQ0B,EAAIzB,EACjCwB,EAASE,KAAKV,EAAcR,G,CAE9B,OAAOgB,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('form'),\n};\n\nlet promises = [];\n\nrefs.form.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(e) {\n  e.preventDefault();\n\n  const { delay, step, amount } = e.target.elements;\n\n  promises = generatePromises(\n    Number(delay.value),\n    Number(step.value),\n    Number(amount.value)\n  );\n\n  promises.forEach((promise, position) => {\n    const promiseDelay = Number(delay.value) + position * Number(step.value);\n    promise\n      .then(() => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position + 1} in ${promiseDelay}ms`\n        );\n      })\n      .catch(() => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position + 1} in ${promiseDelay}ms`\n        );\n      });\n  });\n}\n\nconst createPromise = promiseDelay =>\n  new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(\n      () =>\n        shouldResolve\n          ? resolve({ delay: promiseDelay })\n          : reject({ delay: promiseDelay }),\n      promiseDelay\n    );\n  });\n\nconst generatePromises = (delay, step, amount) => {\n  const promises = [];\n  for (let i = 0; i < amount; i += 1) {\n    const promiseDelay = delay + i * step;\n    promises.push(createPromise(promiseDelay));\n  }\n  return promises;\n};\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","addEventListener","e","preventDefault","_elements","target","elements","delay","step","amount","$ce04d3a99e08e73b$var$generatePromises","Number","value","forEach","promise","position","promiseDelay","then","$parcel$interopDefault","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$createPromise","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","promises1","i","push"],"version":3,"file":"03-promises.5a66b17e.js.map"}